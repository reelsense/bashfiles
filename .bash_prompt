#!/bin/bash

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
    else
    color_prompt=
    fi
fi

## include all the prompt libraries ##
######################################
for prompt_lib in `ls ~/.bash_prompt.d`; do
    . ~/.bash_prompt.d/$prompt_lib
done

# set up the prompt itself
PS1="\[\e[33m\]"

# add the project ps1
PS1="${PS1}\$(project_ps1)"

# add git to the prompt
GIT_PS1_SHOWDIRTYSTATE=true
GIT_PS1_SHOWSTASHSTATE=true
# GIT_PS1_SHOWUPSTREAM="false"
GIT_PS1_SHOWUNTRACKEDFILES=true
PS1="${PS1}\[\e[91m\]\$(__git_ps1 ' (%s) ')"

# add svn to the prompt
# SVN_PS1_SHOWDIRTYSTATE=
# SVN_PS1_SHOWREVISION=
# PS1="${PS1}\[\e[91m\]\$(__svn_ps1 ' (%s) ')"

export PS1="${PS1}\[\e[33m\]\$ \[\e[m\]"

# Change the terminal title when switching directories #
########################################################
function project_set_title() {
    set_title $PROJECT_NAME
}
CHDIR_COMMAND="${CHDIR_COMMAND}project_set_title;"

unset color_prompt force_color_prompt
